{ booleanoptions.inc - Classes and definitions that represent dynamic
    command-line options which contain boolean values.

  This file is part of commandline.pp, a libray for robust command-line parsing.

  This program is free software: you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 3 of the License or, at your
  option, any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABLITY
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
  License for more details.

  You should have received a copy of the GNU General Public License along
  with this program.  If not, see <http://www.gnu.org/licenses/>.
}
{$IFDEF ReadInterface}
// ACommandLineFlag ************************************************************
{ This class represents a command-line flag; that is, an option with a value
  that is only true if the user specifies the name of the option on the command
  line.

  Flag values accept no parameters; merely their presence on the command line is
  enough to trigger them.  The most common flag value is, of course,
  @code(@--help), the presence of which indicates that the user wants more
  information on the various options available for invoking the program.
}
type ACommandLineFlag = class(ACommandLineOption)
  public
    // Initializer
    function init: boolean; override;

    // Properties --------------------------------------------------------------
    { Set the value of the option.

      This method overrides the behavior inherited from
      @link(ACommandLineOption.setValue); it attempts to cast @code(newValue) to
      a @code(boolean) value, since flags may only represent conditions that are
      @true or @false.

      @raises(AnOptionValueError in the event that the attempt to cast
      @code(newValue) to a @code(boolean) value fails.)

      @return(The previous value of
      @link(ADictionaryEntry.value ACommandLineFlag.value).)
    }
    function setValue(const newValue: Variant;
      const makeDirty: boolean = true): Variant; override;
end;

// ACommandLineSwitch **********************************************************
{ This class represents a command-line switch; that is, an option that accepts
  a value which may be @true or @false.

  Unlike @link(ACommandLineFlag flag values), the presence of a switch on the
  command line is not enough; the value of the switch (@code(yes/no),
  @code(on/off), @true/@false, etc.) must also be specified.  Flag values
  usually take the form @code(@--flag=value) when specified on the command line.
}
type ACommandLineSwitch = class(ACommandLineFlag)
  public
    // Initializer
    function init: boolean; override;
end;
{$ENDIF}
{$IFDEF ReadResourceStrings}
  { This string contains the default description returned by
    @link(ACommandLineOption.valueDescription ACommandLineFlag.valueDescription)
    if no other description is set when the option is constructed.

    A value description is presented to the user as part of the usage
    information generated by @link(ACommandLineOption.usageString) and should
    contain a description of the value expected by the option.

    In the case of instances of @link(ACommandLineFlag), no value is expected
    or allowed, so this string is blank.
  }
  clflDefaultValueDescription = '';

  { This string contains the default description returned by
    @link(ACommandLineOption.valueDescription ACommandLineSwitch.valueDescription)
    if no other description is set when the option is constructed.

    A value description is presented to the user as part of the usage
    information generated by @link(ACommandLineOption.usageString) and should
    contain a description of the value expected by the option.
  }
  clswDefaultValueDescription = '<true|false>';
{$ENDIF}
{$IFDEF ReadImplementation}
// ACommandLineFlag ************************************************************
// Initializer
function ACommandLineFlag.init: boolean;

begin
  result := inherited init;

  if result then
  begin
    myOptionType := [ovtFlag];
    myValueDescription := clflDefaultValueDescription;
  end;
end;

// Properties ------------------------------------------------------------------
// Set the value of the option
function ACommandLineFlag.setValue(const newValue: Variant;
  const makeDirty: boolean = true): Variant;

begin
  result := myValue;

  try
    myValue := boolean(newValue);

  except
    raise AnOptionValueError.because(clopErrorValueExpected, [
      Self.name, Self.valueDescription
    ]);
  end;

  myDirtiness := makeDirty;
end;

// ACommandLineSwitch **********************************************************
// Initializer
function ACommandLineSwitch.init: boolean;

begin
  result := inherited init;

  if result then
  begin
    myOptionType := [ovtSwitch];
    myValueDescription := clswDefaultValueDescription;
  end;
end;
{$ENDIF}

